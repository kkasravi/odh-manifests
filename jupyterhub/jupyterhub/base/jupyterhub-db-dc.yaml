apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: kamhub # {"$openapi":"APPLICATION_NAME"}
  name: kamhub-db # {"$openapi":"APPLICATION_DB_NAME"}
spec:
  replicas: 1
  selector:
    app: kamhub # {"$openapi":"APPLICATION_NAME"}
    deploymentconfig: kamhub-db # {"$openapi":"APPLICATION_DB_NAME"}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kamhub # {"$openapi":"APPLICATION_NAME"}
        deploymentconfig: kamhub-db # {"$openapi":"APPLICATION_DB_NAME"}
        component.opendatahub.io/name: kamhub # {"$openapi":"APPLICATION_NAME"}
        opendatahub.io/component: 'true'
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - image: registry.redhat.io/rhel8/postgresql-96
        env:
        - name: POSTGRESQL_USER
          value: kamhub # {"$openapi":"APPLICATION_NAME"}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(jupyterhub_secret)
              key: POSTGRESQL_PASSWORD
        - name: POSTGRESQL_DATABASE
          value: kamhub # {"$openapi":"APPLICATION_NAME"}
        livenessProbe:
          tcpSocket:
            port: 5432
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
              'SELECT 1'
        resources:
          limits:
            memory: 1Gi
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: kamhub-db # {"$openapi":"APPLICATION_DB_NAME"}
      - configMap:
          defaultMode: 420
          name: kamhub-cfg # {"$openapi":"APPLICATION_CFG_NAME"}
        name: config
  triggers:
  - type: ConfigChange
